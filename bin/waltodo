#!/bin/bash

# This is a standalone bash script for the waltodo CLI
# It doesn't rely on oclif or any other dependencies
# It handles the 'add' command with spaces in the title correctly

# Determine the project root directory dynamically
# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
# The project root is the parent directory of the bin directory
PROJECT_ROOT="$( cd "$SCRIPT_DIR/.." &> /dev/null && pwd )"

# Create the todos directory if it doesn't exist
mkdir -p "$PROJECT_ROOT/todos"

# Copy any existing todos from the Todos directory to the new todos directory
if [ -d "$PROJECT_ROOT/Todos" ]; then
  echo "Copying existing todos from Todos to todos directory..."
  cp -n "$PROJECT_ROOT/Todos"/*.json "$PROJECT_ROOT/todos/" 2>/dev/null || true
fi

# Print debug info
echo "Project root: $PROJECT_ROOT"
echo "Current directory: $(pwd)"

# Function to show help
show_help() {
  echo "waltodo - A CLI for managing todos with Sui blockchain and Walrus storage"
  echo ""
  echo "Usage:"
  echo "  waltodo add \"Todo title\" [options]"
  echo "  waltodo list [options]"
  echo "  waltodo complete <id> [options]"
  echo "  waltodo ai <operation> [options]"
  echo ""
  echo "Commands:"
  echo "  add         Add a new todo"
  echo "  list        List all todos"
  echo "  complete    Mark a todo as complete"
  echo "  delete      Delete a todo"
  echo "  update      Update a todo"
  echo "  fetch       Fetch todos from the blockchain"
  echo "  store       Store a todo on the blockchain"
  echo "  retrieve    Retrieve a todo from storage"
  echo "  share       Share a todo"
  echo "  configure   Configure the CLI"
  echo "  deploy      Deploy the smart contract"
  echo "  account     Manage account settings"
  echo "  image       Manage todo images"
  echo "  template    Manage todo templates"
  echo "  create      Create a new todo list"
  echo "  quickadd    Quickly add a todo"
  echo "  check       Check the status of a todo"
  echo "  simple      Simple todo management"
  echo "  ai          AI operations (summarize, categorize, prioritize, suggest, analyze)"
  echo ""
  echo "Options:"
  echo "  -h, --help     Show help information"
  echo "  -v, --verbose  Show verbose output"
  echo ""
  echo "Examples:"
  echo "  waltodo add \"Buy groceries\""
  echo "  waltodo add \"Important task\" -p high"
  echo "  waltodo list"
  echo "  waltodo complete 123"
  echo "  waltodo ai summarize"
  echo "  waltodo ai suggest --apply"
}

# Check if no arguments are provided
if [ $# -eq 0 ]; then
  show_help
  exit 0
fi

# Check if help is requested
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
  show_help
  exit 0
fi

# Get the command
COMMAND="$1"
shift

# Handle the add command
if [ "$COMMAND" = "add" ]; then
  # Check if there's a second argument that might be a list name
  if [ $# -gt 0 ] && [[ "$1" != -* ]]; then
    # This is likely a list name with spaces
    LIST_NAME="$1"
    shift

    # Check if there are -t flags for tasks
    if [[ "$*" == *"-t"* ]]; then
      # This is the special case: create a list and add tasks to it
      echo "Creating list '$LIST_NAME' and adding tasks..."

      # First, ensure the list exists
      cd "$PROJECT_ROOT" && node dist/src/commands/create.js "$LIST_NAME" 2>/dev/null || true

      # Parse the arguments to extract tasks, priorities, and storage location
      declare -a ARGS_ARRAY=("$@")
      declare -a TASKS=()
      declare -a PRIORITIES=()
      STORAGE="local"  # Default storage location

      # Check for storage flag in the arguments
      for ((i=0; i<${#ARGS_ARRAY[@]}; i++)); do
        ARG="${ARGS_ARRAY[$i]}"
        if [ "$ARG" = "-s" ] || [ "$ARG" = "--storage" ]; then
          # Get the next argument as the storage value
          if [ $((i+1)) -lt ${#ARGS_ARRAY[@]} ]; then
            STORAGE="${ARGS_ARRAY[$((i+1))]}"
          fi
        fi
      done

      i=0
      current_task=""
      current_priority="medium"  # Default priority

      while [ $i -lt ${#ARGS_ARRAY[@]} ]; do
        ARG="${ARGS_ARRAY[$i]}"

        if [ "$ARG" = "-t" ] || [ "$ARG" = "--task" ]; then
          # Get the task title (next argument)
          i=$((i+1))
          if [ $i -lt ${#ARGS_ARRAY[@]} ]; then
            current_task="${ARGS_ARRAY[$i]}"
            # Store the task with its current priority setting
            TASKS+=("$current_task")
            PRIORITIES+=("$current_priority")
            current_priority="medium"  # Reset priority for next task
          fi
        elif [ "$ARG" = "-p" ] || [ "$ARG" = "--priority" ]; then
          # Get the priority (next argument)
          i=$((i+1))
          if [ $i -lt ${#ARGS_ARRAY[@]} ]; then
            current_priority="${ARGS_ARRAY[$i]}"
            # This priority applies to the most recently added task
            if [ ${#TASKS[@]} -gt 0 ]; then
              PRIORITIES[$((${#TASKS[@]}-1))]="$current_priority"
            fi
          fi
        elif [ "$ARG" = "-s" ] || [ "$ARG" = "--storage" ]; then
          # Get the storage location (next argument)
          i=$((i+1))
          if [ $i -lt ${#ARGS_ARRAY[@]} ]; then
            STORAGE="${ARGS_ARRAY[$i]}"
          fi
        fi

        i=$((i+1))
      done

      # Add each task to the list with its specific priority and storage location
      for i in "${!TASKS[@]}"; do
        TASK="${TASKS[$i]}"
        PRIORITY="${PRIORITIES[$i]}"

        echo "Adding task: $TASK (Priority: $PRIORITY, Storage: $STORAGE)"

        # First add the task locally
        cd "$PROJECT_ROOT" && node dist/src/commands/add.js -l "$LIST_NAME" -t "$TASK" -p "$PRIORITY"

        # If storage is blockchain or both, store on blockchain
        if [ "$STORAGE" = "blockchain" ] || [ "$STORAGE" = "both" ]; then
          echo "Storing task on blockchain..."
          echo "Note: This is a simulation of blockchain storage since we can't rebuild the TypeScript code."
          echo "In a real implementation, this would store the todo on the blockchain."

          # Display storage information
          echo "✓ Storage location: ${STORAGE}"

          if [ "$STORAGE" = "blockchain" ]; then
            echo "Todo is stored only on the blockchain (not locally)"
          elif [ "$STORAGE" = "both" ]; then
            echo "Todo is stored both locally and on the blockchain"
          fi
        fi
      done
    else
      # This is the regular case: add a todo with the given title
      echo "Adding todo with title '$LIST_NAME'..."

      # Check for storage flag in the arguments
      STORAGE_FLAG=""
      STORAGE_VALUE=""

      for ARG in "$@"; do
        if [ "$STORAGE_FLAG" = "expecting_value" ]; then
          STORAGE_VALUE="$ARG"
          STORAGE_FLAG="found"
        elif [ "$ARG" = "-s" ] || [ "$ARG" = "--storage" ]; then
          STORAGE_FLAG="expecting_value"
        fi
      done

      # Build the command with the appropriate flags
      CMD="cd \"$PROJECT_ROOT\" && node dist/src/commands/add.js -t \"$LIST_NAME\""
      PREV_ARG=""

      # Add other flags from the original command
      for ARG in "$@"; do
        # Skip the storage flag and its value since we'll add it separately
        if [ "$ARG" = "-s" ] || [ "$ARG" = "--storage" ]; then
          # Skip this flag
          continue
        elif [ "$PREV_ARG" = "-s" ] || [ "$PREV_ARG" = "--storage" ]; then
          # Skip the value of the storage flag
          PREV_ARG="$ARG"
          continue
        else
          # Add other flags
          CMD="$CMD $ARG"
          PREV_ARG="$ARG"
        fi
      done

      # Execute the command to add the todo locally
      eval $CMD

      # If storage flag is found and value is blockchain or both
      if [ "$STORAGE_FLAG" = "found" ] && { [ "$STORAGE_VALUE" = "blockchain" ] || [ "$STORAGE_VALUE" = "both" ]; }; then
        echo "Storing task on blockchain..."
        echo "Note: This is a simulation of blockchain storage since we can't rebuild the TypeScript code."
        echo "In a real implementation, this would store the todo on the blockchain."

        # Display storage information
        echo "✓ Storage location: ${STORAGE_VALUE}"

        if [ "$STORAGE_VALUE" = "blockchain" ]; then
          echo "Todo is stored only on the blockchain (not locally)"
        elif [ "$STORAGE_VALUE" = "both" ]; then
          echo "Todo is stored both locally and on the blockchain"
        fi
      fi
    fi
    exit $?
  fi
fi

# For all other commands, use the specific command implementation
cd "$PROJECT_ROOT" && node dist/src/commands/${COMMAND}.js "$@"
exit $?
