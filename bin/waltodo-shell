#!/bin/bash

# WalTodo Shell - A simple shell implementation of the WalTodo CLI
# This script provides basic functionality when Node.js is not available

# Get the absolute path of the installation directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(cd "${SCRIPT_DIR}/.." && pwd)"

# Data directory for storing todos
DATA_DIR="$HOME/.waltodo"
DEFAULT_LIST="default"

# Create data directory if it doesn't exist
mkdir -p "$DATA_DIR"

# Function to show usage information
show_usage() {
  echo "WalTodo - A simple todo manager"
  echo ""
  echo "Usage: waltodo-shell <command> [options]"
  echo ""
  echo "Commands:"
  echo "  add <title>                Add a new todo"
  echo "  list [list-name]           List todos or available lists"
  echo "  complete <id>              Mark a todo as completed"
  echo "  delete <id>                Delete a todo"
  echo "  help                       Show this help message"
  echo ""
  echo "Note: This is a simplified shell version of WalTodo."
  echo "For full functionality, please install Node.js and use the main CLI."
}

# Function to add a todo
add_todo() {
  if [ -z "$1" ]; then
    echo "Error: Todo title is required"
    echo "Usage: waltodo-shell add <title>"
    exit 1
  fi

  # Get the list name (default if not specified)
  LIST_NAME="${2:-$DEFAULT_LIST}"
  LIST_FILE="$DATA_DIR/$LIST_NAME.txt"
  
  # Create list file if it doesn't exist
  touch "$LIST_FILE"
  
  # Generate a unique ID
  TODO_ID=$(date +%s)
  
  # Add the todo to the list
  echo "$TODO_ID|$1|false|$(date +%Y-%m-%d)" >> "$LIST_FILE"
  
  echo "✅ Added todo \"$1\" to list \"$LIST_NAME\""
}

# Function to list todos
list_todos() {
  # If no list name is provided, show available lists
  if [ -z "$1" ]; then
    echo "Available todo lists:"
    echo "--------------------"
    
    # Find all list files and extract list names
    for list_file in "$DATA_DIR"/*.txt; do
      if [ -f "$list_file" ]; then
        list_name=$(basename "$list_file" .txt)
        todo_count=$(wc -l < "$list_file" | tr -d ' ')
        echo "- $list_name ($todo_count todos)"
      fi
    done
    
    # If no lists found
    if [ ! "$(ls -A "$DATA_DIR")" ]; then
      echo "No todo lists found."
      echo "Create your first list with: waltodo-shell add \"My first todo\""
    fi
    
    return
  fi
  
  # Show todos in the specified list
  LIST_NAME="$1"
  LIST_FILE="$DATA_DIR/$LIST_NAME.txt"
  
  if [ ! -f "$LIST_FILE" ]; then
    echo "Error: List \"$LIST_NAME\" not found"
    exit 1
  fi
  
  echo "Todo list: $LIST_NAME"
  echo "--------------------"
  
  # Count total and completed todos
  TOTAL=$(wc -l < "$LIST_FILE" | tr -d ' ')
  COMPLETED=$(grep "|true|" "$LIST_FILE" | wc -l | tr -d ' ')
  
  echo "Progress: $COMPLETED/$TOTAL completed"
  echo ""
  
  # Display todos
  if [ "$TOTAL" -eq 0 ]; then
    echo "No todos in this list."
    echo "Add your first todo with: waltodo-shell add \"My first todo\" $LIST_NAME"
  else
    # Read and display each todo
    while IFS="|" read -r id title completed date; do
      if [ "$completed" = "true" ]; then
        status="[✓]"
      else
        status="[ ]"
      fi
      echo "$status $id: $title ($date)"
    done < "$LIST_FILE"
  fi
}

# Function to mark a todo as completed
complete_todo() {
  if [ -z "$1" ]; then
    echo "Error: Todo ID is required"
    echo "Usage: waltodo-shell complete <id> [list-name]"
    exit 1
  fi
  
  TODO_ID="$1"
  LIST_NAME="${2:-$DEFAULT_LIST}"
  LIST_FILE="$DATA_DIR/$LIST_NAME.txt"
  
  if [ ! -f "$LIST_FILE" ]; then
    echo "Error: List \"$LIST_NAME\" not found"
    exit 1
  fi
  
  # Create a temporary file
  TEMP_FILE=$(mktemp)
  
  # Flag to check if the todo was found
  FOUND=false
  
  # Process each line
  while IFS="|" read -r id title completed date; do
    if [ "$id" = "$TODO_ID" ]; then
      # Update the completed status
      echo "$id|$title|true|$date" >> "$TEMP_FILE"
      FOUND=true
      echo "✅ Marked todo \"$title\" as completed"
    else
      # Keep the line as is
      echo "$id|$title|$completed|$date" >> "$TEMP_FILE"
    fi
  done < "$LIST_FILE"
  
  if [ "$FOUND" = false ]; then
    echo "Error: Todo with ID \"$TODO_ID\" not found in list \"$LIST_NAME\""
    rm "$TEMP_FILE"
    exit 1
  fi
  
  # Replace the original file with the updated one
  mv "$TEMP_FILE" "$LIST_FILE"
}

# Function to delete a todo
delete_todo() {
  if [ -z "$1" ]; then
    echo "Error: Todo ID is required"
    echo "Usage: waltodo-shell delete <id> [list-name]"
    exit 1
  fi
  
  TODO_ID="$1"
  LIST_NAME="${2:-$DEFAULT_LIST}"
  LIST_FILE="$DATA_DIR/$LIST_NAME.txt"
  
  if [ ! -f "$LIST_FILE" ]; then
    echo "Error: List \"$LIST_NAME\" not found"
    exit 1
  fi
  
  # Create a temporary file
  TEMP_FILE=$(mktemp)
  
  # Flag to check if the todo was found
  FOUND=false
  
  # Process each line
  while IFS="|" read -r id title completed date; do
    if [ "$id" = "$TODO_ID" ]; then
      # Skip this line (delete the todo)
      FOUND=true
      echo "✅ Deleted todo \"$title\""
    else
      # Keep the line as is
      echo "$id|$title|$completed|$date" >> "$TEMP_FILE"
    fi
  done < "$LIST_FILE"
  
  if [ "$FOUND" = false ]; then
    echo "Error: Todo with ID \"$TODO_ID\" not found in list \"$LIST_NAME\""
    rm "$TEMP_FILE"
    exit 1
  fi
  
  # Replace the original file with the updated one
  mv "$TEMP_FILE" "$LIST_FILE"
}

# Main command processing
case "$1" in
  add)
    shift
    add_todo "$@"
    ;;
  list)
    shift
    list_todos "$@"
    ;;
  complete)
    shift
    complete_todo "$@"
    ;;
  delete)
    shift
    delete_todo "$@"
    ;;
  help|--help|-h)
    show_usage
    ;;
  *)
    if [ -z "$1" ]; then
      show_usage
    else
      echo "Error: Unknown command \"$1\""
      echo "Run 'waltodo-shell help' for usage information"
      exit 1
    fi
    ;;
esac
