#!/usr/bin/env node

// This is a standalone version of the waltodo CLI command
// It will run the CLI from the current directory

// Force stdout and stderr to be synchronous to prevent output issues
process.stdout._handle && process.stdout._handle.setBlocking && process.stdout._handle.setBlocking(true);
process.stderr._handle && process.stderr._handle.setBlocking && process.stderr._handle.setBlocking(true);

// Get the current directory
const path = require('path');
const fs = require('fs');
const currentDir = process.cwd();

// Find the project root (where package.json is)
function findProjectRoot(startDir) {
  let dir = startDir;
  while (!fs.existsSync(path.join(dir, 'package.json'))) {
    const parentDir = path.dirname(dir);
    if (parentDir === dir) {
      // We've reached the root directory and haven't found package.json
      return null;
    }
    dir = parentDir;
  }
  return dir;
}

// Try to find the project root
const projectRoot = findProjectRoot(__dirname) ||
                    findProjectRoot(currentDir) ||
                    path.resolve(__dirname, '..');

// Run the CLI directly from the project directory
try {
  // Change to the project directory
  process.chdir(projectRoot);

  // Suppress OCLIF warnings
  process.env.NODE_NO_WARNINGS = '1';

  // Get the command line arguments
  const args = process.argv.slice(2);

  // If no arguments, show help
  if (args.length === 0) {
    try {
      // Try to require the built index file
      const main = require(path.join(projectRoot, 'dist', 'src', 'index.js'));
      main.run().catch(err => {
        console.error('Error running command:', err);
        process.exit(1);
      });
      return;
    } catch (error) {
      console.error('Error loading main module:', error);
      process.exit(1);
    }
  }

  // Get the command name (first argument)
  const commandName = args[0];

  // Check if it's a help request
  if (commandName === '--help' || commandName === '-h') {
    try {
      // Try to require the built index file
      const main = require(path.join(projectRoot, 'dist', 'src', 'index.js'));
      main.run(['--help']).catch(err => {
        console.error('Error running help command:', err);
        process.exit(1);
      });
      return;
    } catch (error) {
      console.error('Error loading main module:', error);
      process.exit(1);
    }
  }

  // Special handling for the add command with a title
  if (commandName === 'add' && args.length >= 2 && !args[1].startsWith('-')) {
    // This is likely a title with spaces
    const title = args[1];
    const restArgs = args.slice(2);

    try {
      // Try to require the add command directly
      const AddCommand = require(path.join(projectRoot, 'dist', 'src', 'commands', 'add.js')).default;

      // Run the command with the title as a task
      new AddCommand().run(['-t', title, ...restArgs]).catch(err => {
        console.error('Error running add command:', err);
        process.exit(1);
      });
      return;
    } catch (error) {
      console.error('Error loading add command:', error);
      process.exit(1);
    }
  }

  // For all other commands, try to load the command module directly
  try {
    // Try to require the command module
    const CommandModule = require(path.join(projectRoot, 'dist', 'src', 'commands', `${commandName}.js`)).default;

    // Run the command with the remaining arguments
    new CommandModule().run(args.slice(1)).catch(err => {
      console.error('Error running command:', err);
      process.exit(1);
    });
  } catch (error) {
    // If we can't load the command module, fall back to the run.js script
    try {
      // Execute the command using the run.js script
      // SECURITY FIX: Don't use string interpolation with bash -c
      // Instead, pass arguments directly to node
      const { spawnSync } = require('child_process');

      // First change to the project root directory
      process.chdir(projectRoot);

      // Then execute node with the run.js script and pass the arguments directly
      const result = spawnSync('node', ['./bin/run.js', ...args], {
        stdio: 'inherit',
        env: {
          ...process.env,
          NODE_NO_WARNINGS: '1',
          OCLIF_HIDE_WARN: 'true'
        }
      });

      if (result.status !== 0) {
        process.exit(result.status || 1);
      }
    } catch (error) {
      // The command itself failed, but we've already shown the output
      process.exit(error.status || 1);
    }
  } catch (error) {
    console.error('Error executing command:', error);
    process.exit(1);
  }
} catch (error) {
  console.error('Fatal error:', error);
  process.exit(1);
}
