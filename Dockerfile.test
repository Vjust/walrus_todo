# Dockerfile for comprehensive WalTodo CLI testing
FROM node:18-bullseye

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    build-essential \
    python3 \
    python3-pip \
    jq \
    vim \
    tmux \
    netcat \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Install pnpm globally
RUN npm install -g pnpm@10.11.0

# Create test user with proper permissions
RUN useradd -m -s /bin/bash testuser && \
    usermod -aG sudo testuser && \
    echo "testuser ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

# Create directory structure for WalTodo
USER testuser
WORKDIR /home/testuser/waltodo

# Copy the entire project first
COPY --chown=testuser:testuser . .

# Create necessary directories
RUN mkdir -p \
    /home/testuser/waltodo/Todos \
    /home/testuser/waltodo/logs \
    /home/testuser/waltodo/test-results \
    /home/testuser/.walrus \
    /home/testuser/.sui

# Set up environment variables for testing
ENV NODE_ENV=test
ENV WALTODO_TEST_MODE=true
ENV WALTODO_SUPPRESS_WARNINGS=true
ENV NODE_OPTIONS="--max-old-space-size=4096"

# Create a test configuration
RUN echo "# Walrus testnet configuration for testing" > /home/testuser/.walrus/client_config.yaml && \
    echo "system_object: 0x6c2547cbbc38025cf3adac45f63cb0a8d12ecf777cdc75a4971612bf97fdf6af" >> /home/testuser/.walrus/client_config.yaml && \
    echo "staking_object: 0xbe46180321c30aab2f8b3501e24048377287fa708018a5b7c2792b35fe339ee3" >> /home/testuser/.walrus/client_config.yaml && \
    echo "epochs_ahead: 1" >> /home/testuser/.walrus/client_config.yaml

# Install dependencies (without frozen lockfile to handle mismatches)
RUN pnpm install --no-frozen-lockfile || echo "Installation completed with warnings"

# Try to build the project (fallback if it fails)
RUN pnpm build:dev || echo "Build failed, will use fallback testing"

# Make sure CLI binary is executable
RUN chmod +x /home/testuser/waltodo/bin/waltodo || echo "CLI binary not found, will test source directly"

# Create test script directory
RUN mkdir -p /home/testuser/test-scripts

# Set the working directory for test execution
WORKDIR /home/testuser/waltodo

# Default command runs the test suite
CMD ["bash", "/home/testuser/test-scripts/run-comprehensive-tests.sh"]