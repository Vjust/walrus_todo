/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  images: {
    domains: ['localhost', '192.168.8.204'],
  },
  // Disable chunking for development to fix MIME type issues
  output: process.env.NODE_ENV === 'production' ? 'standalone' : undefined,
  
  // Increase timeout for static generation
  staticPageGenerationTimeout: 180,
  
  webpack: (config, { isServer, dev }) => {
    // Fix for node-fetch encoding issue
    if (!isServer) {
      config.resolve.fallback = {
        ...config.resolve.fallback,
        fs: false,
        net: false,
        tls: false,
        encoding: false,
      };
      
      // For development mode, completely disable code splitting
      // This prevents MIME type issues with chunked files
      if (dev) {
        config.optimization.splitChunks = false;
        config.optimization.runtimeChunk = false;
        
        // Simplify CSS handling to prevent MIME type issues
        // Safer approach that doesn't rely on complex find operations
        config.module.rules.forEach(rule => {
          if (rule.oneOf) {
            rule.oneOf.forEach(r => {
              if (r.test && r.test.toString().includes('css')) {
                // For CSS modules, ensure they're handled by style-loader
                if (r.use && Array.isArray(r.use)) {
                  for (let i = 0; i < r.use.length; i++) {
                    const loader = r.use[i];
                    if (typeof loader === 'object' && 
                        loader.loader && 
                        loader.loader.includes('mini-css-extract-plugin')) {
                      // Replace mini-css-extract-plugin with style-loader
                      r.use[i] = {
                        loader: require.resolve('style-loader')
                      };
                    }
                  }
                }
              }
            });
          }
        });
      } else {
        // More sophisticated chunking for production
        config.optimization.splitChunks = {
          chunks: 'all',
          cacheGroups: {
            default: false,
            vendors: false,
            commons: {
              name: 'commons',
              test: /[\\/]node_modules[\\/]/,
              chunks: 'all',
              priority: 10,
            },
            framework: {
              name: 'framework',
              test: /[\\/]node_modules[\\/](react|react-dom|scheduler|prop-types|use-subscription)[\\/]/,
              chunks: 'all',
              priority: 20,
            },
          },
        };
      }
    }
    
    return config;
  },
  
  // Configure runtime to handle client-side operations correctly
  experimental: {
    // Configure server actions
    serverActions: {
      bodySizeLimit: '2mb',
    },
    // Force full page rendering
    workerThreads: false,
    // Use simple compiler options
    optimizeCss: false,
  },
  
  // Allow development origins
  allowedDevOrigins: [
    '192.168.8.204:3000', // Add specific IP with port
    'localhost:3000'
  ],
  
  // Define custom headers to help with caching and security
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'Cache-Control',
            value: 'no-cache, no-store, must-revalidate',
          },
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff',
          },
          {
            key: 'X-Frame-Options',
            value: 'SAMEORIGIN',
          },
        ],
      },
    ];
  },

  // Fix for development server restarts
  onDemandEntries: {
    // Keep pages in memory for longer
    maxInactiveAge: 60 * 60 * 1000, // 1 hour
    pagesBufferLength: 5,
  },
}

module.exports = nextConfig