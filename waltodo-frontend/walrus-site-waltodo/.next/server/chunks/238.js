"use strict";exports.id=238,exports.ids=[238],exports.modules={29238:(t,e,a)=>{a.d(e,{AQ:()=>h,zg:()=>u,Jn:()=>d,$4:()=>l});var r=a(65054),o=a(4074);class i{constructor(t={}){this.db=null,this.dbName="walrus-cache",this.version=1,this.initPromise=null,this.maxSize=t.maxSize||52428800,this.maxEntries=t.maxEntries||1e3,this.ttl=t.ttl||864e5}async init(){this.db||(this.initPromise||(this.initPromise=this.initializeDB()),await this.initPromise)}async initializeDB(){try{this.db=await (0,o.X3)(this.dbName,this.version,{upgrade(t,e,a,r){if(!t.objectStoreNames.contains("cache")){let e=t.createObjectStore("cache",{keyPath:"id"});e.createIndex("by-timestamp","timestamp",{unique:!1}),e.createIndex("by-last-accessed","lastAccessed",{unique:!1})}t.objectStoreNames.contains("metadata")||t.createObjectStore("metadata",{keyPath:"key"})}}),await this.initializeMetadata()}catch(t){throw console.error("Failed to initialize IndexedDB:",t),t}}async initializeMetadata(){if(!this.db)return;let t=this.db.transaction("metadata","readwrite");await t.store.get("cache-meta")||await t.store.put({totalSize:0,entryCount:0,version:this.version,lastCleanup:Date.now()},"cache-meta"),await t.done}async get(t){if(await this.init(),!this.db)return null;try{let e=this.db.transaction("cache","readwrite"),a=await e.store.get(t);if(!a)return null;if(Date.now()-a.timestamp>this.ttl)return await this.delete(t),null;return a.lastAccessed=Date.now(),await e.store.put(a),await e.done,a}catch(t){return console.error("Cache get error:",t),null}}async set(t,e,a){if(await this.init(),!this.db)return;let r=new Blob([e]).size,o=Date.now(),i={id:t,data:e,contentType:a?.contentType,contentLength:a?.contentLength,timestamp:o,lastAccessed:o,size:r,version:this.version};try{await this.ensureSpace(r);let e=this.db.transaction(["cache","metadata"],"readwrite"),a=await e.objectStore("cache").get(t);await e.objectStore("cache").put(i);let o=await e.objectStore("metadata").get("cache-meta");o&&(o.totalSize=o.totalSize-(a?.size||0)+r,o.entryCount=a?o.entryCount:o.entryCount+1,await e.objectStore("metadata").put(o)),await e.done}catch(t){console.error("Cache set error:",t)}}async delete(t){if(await this.init(),this.db)try{let e=this.db.transaction(["cache","metadata"],"readwrite"),a=await e.objectStore("cache").get(t);if(a){await e.objectStore("cache").delete(t);let r=await e.objectStore("metadata").get("cache-meta");r&&(r.totalSize-=a.size,r.entryCount-=1,await e.objectStore("metadata").put(r))}await e.done}catch(t){console.error("Cache delete error:",t)}}async clear(){if(await this.init(),this.db)try{let t=this.db.transaction(["cache","metadata"],"readwrite");await t.objectStore("cache").clear();let e=await t.objectStore("metadata").get("cache-meta");e&&(e.totalSize=0,e.entryCount=0,e.lastCleanup=Date.now(),await t.objectStore("metadata").put(e)),await t.done}catch(t){console.error("Cache clear error:",t)}}async getStats(){if(await this.init(),!this.db)return{totalSize:0,entryCount:0,version:this.version};try{let t;let e=await this.db.get("metadata","cache-meta");if(!e)return{totalSize:0,entryCount:0,version:this.version};let a=this.db.transaction("cache","readonly").store.index("by-timestamp"),r=await a.openCursor();return r&&(t=r.value.timestamp),{totalSize:e.totalSize,entryCount:e.entryCount,oldestEntry:t,version:e.version}}catch(t){return console.error("Cache stats error:",t),{totalSize:0,entryCount:0,version:this.version}}}async ensureSpace(t){if(!this.db)return;let e=await this.getStats();if(e.totalSize+t<=this.maxSize&&e.entryCount<this.maxEntries)return;let a=this.db.transaction(["cache","metadata"],"readwrite"),r=a.objectStore("cache").index("by-last-accessed"),o=0,i=0,n=[];for await(let a of r.iterate()){if(e.totalSize-o+t<=this.maxSize&&e.entryCount-i<this.maxEntries)break;n.push(a.value.id),o+=a.value.size,i++}for(let t of n)await a.objectStore("cache").delete(t);let s=await a.objectStore("metadata").get("cache-meta");s&&(s.totalSize-=o,s.entryCount-=i,await a.objectStore("metadata").put(s)),await a.done}async cleanup(){if(await this.init(),!this.db)return{removedEntries:0,freedSpace:0};try{let t=Date.now(),e=this.db.transaction(["cache","metadata"],"readwrite"),a=e.objectStore("cache"),r=0,o=0,i=[];for await(let e of a.iterate())t-e.value.timestamp>this.ttl&&(i.push(e.value.id),o+=e.value.size,r++);for(let t of i)await a.delete(t);let n=await e.objectStore("metadata").get("cache-meta");return n&&(n.totalSize-=o,n.entryCount-=r,n.lastCleanup=t,await e.objectStore("metadata").put(n)),await e.done,{removedEntries:r,freedSpace:o}}catch(t){return console.error("Cache cleanup error:",t),{removedEntries:0,freedSpace:0}}}async export(){if(await this.init(),!this.db)return{version:this.version,entries:[],metadata:null};try{let t=this.db.transaction(["cache","metadata"],"readonly"),e=await t.objectStore("cache").getAll(),a=await t.objectStore("metadata").get("cache-meta");return{version:this.version,entries:e,metadata:a||null}}catch(t){return console.error("Cache export error:",t),{version:this.version,entries:[],metadata:null}}}async import(t){if(await this.init(),this.db)try{await this.clear();let e=this.db.transaction(["cache","metadata"],"readwrite");for(let a of t.entries)a.version=this.version,await e.objectStore("cache").put(a);t.metadata&&(t.metadata.version=this.version,await e.objectStore("metadata").put({...t.metadata},"cache-meta")),await e.done}catch(t){console.error("Cache import error:",t)}}close(){this.db&&(this.db.close(),this.db=null,this.initPromise=null)}}let n=new i;var s=a(14765);class c{constructor(){this.publisherUrl="https://publisher-testnet.walrus.space",this.aggregatorUrl="https://aggregator-testnet.walrus.space",this.configPromise=this.loadConfig()}async loadConfig(){try{let t=await (0,r.qn)();this.publisherUrl=t.walrus.publisherUrl,this.aggregatorUrl=t.walrus.aggregatorUrl}catch(t){console.warn("Failed to load Walrus config, using fallback URLs:",t)}}async ensureConfigLoaded(){await this.configPromise}async upload(t,e){await this.ensureConfigLoaded();let a=performance.now();try{let r="string"==typeof t?new TextEncoder().encode(t):t,o=new FormData,i=new Blob([r],{type:e?.contentType||"application/octet-stream"});o.append("file",i);let n=new URL(`${this.publisherUrl}/v1/store`);e?.epochs&&n.searchParams.append("epochs",e.epochs.toString()),e?.onProgress?.(30);let c=await fetch(n.toString(),{method:"PUT",body:r,headers:{"Content-Type":e?.contentType||"application/octet-stream"}});if(e?.onProgress?.(70),!c.ok){let t=await c.text();throw Error(`Upload failed: ${c.status} - ${t}`)}let l=await c.json(),d=l.newlyCreated||l.alreadyCertified;if(!d?.blobId)throw Error("Invalid response from Walrus");e?.onProgress?.(100);let h=performance.now()-a,u=d.size||r.length;return s.co?.trackStorage({action:"upload",size:u,duration:h,success:!0}),{blobId:d.blobId,size:u,encodedSize:d.encodedSize||r.length,cost:d.cost||0}}catch(e){throw console.error("Walrus upload error:",e),s.co?.trackStorage({action:"upload",size:"string"==typeof t?new TextEncoder().encode(t).length:t.length,duration:performance.now()-a,success:!1,error:e instanceof Error?e.message:String(e)}),e}}async download(t,e=!0){await this.ensureConfigLoaded(),performance.now();let a=performance.now();if(e)try{let e=await n.get(t);if(e){let a=atob(e.data),r=new Uint8Array(a.length);for(let t=0;t<a.length;t++)r[t]=a.charCodeAt(t);return{id:t,data:r,contentType:e.contentType}}}catch(t){console.warn("Cache read failed, fetching from network:",t)}try{let r=await fetch(`${this.aggregatorUrl}/v1/${t}`,{method:"GET"});if(!r.ok)throw Error(`Download failed: ${r.status}`);let o=await r.arrayBuffer(),i=r.headers.get("content-type")||void 0,c={id:t,data:new Uint8Array(o),contentType:i};if(e)try{let e=btoa(String.fromCharCode(...Array.from(c.data)));await n.set(t,e,{contentType:i,contentLength:c.data.length})}catch(t){console.warn("Failed to cache blob:",t)}return s.co?.trackStorage({action:"download",size:c.data.length,duration:performance.now()-a,success:!0}),c}catch(t){throw console.error("Walrus download error:",t),s.co?.trackStorage({action:"download",duration:performance.now()-a,success:!1,error:t instanceof Error?t.message:String(t)}),t}}async uploadJson(t,e){let a=JSON.stringify(t);return this.upload(a,{...e,contentType:"application/json"})}async downloadJson(t){let e=await this.download(t);return JSON.parse(new TextDecoder().decode(e.data))}async uploadImage(t,e){let a=await t.arrayBuffer();return this.upload(new Uint8Array(a),{...e,contentType:t.type})}getBlobUrl(t){return`${this.aggregatorUrl}/v1/${t}`}async exists(t){await this.ensureConfigLoaded(),performance.now();try{return(await fetch(`${this.aggregatorUrl}/v1/${t}`,{method:"HEAD"})).ok}catch{return!1}}async deleteBlob(t,e){return console.warn("Blob deletion is not supported in current Walrus version"),t}async blobExists(t){return this.exists(t)}async getBlobInfo(t){return{size:(await this.download(t)).data.length}}async calculateStorageCost(t,e){let a=BigInt(t),r=BigInt(t)*BigInt(e);return{totalCost:a+r,storageCost:r,writeCost:a}}async getWalBalance(){return"1000.0"}async getStorageUsage(){return{used:"256",total:"10240"}}async clearCache(t){t?await n.delete(t):await n.clear()}async getCacheStats(){return n.getStats()}async preloadBlobs(t){let e=t.map(async t=>{try{await this.download(t,!0)}catch(e){console.error(`Failed to preload blob ${t}:`,e)}});await Promise.all(e)}async cleanupCache(){return n.cleanup()}async isCached(t){return null!==await n.get(t)}}let l=new c,d=t=>l.getBlobUrl(t);class h extends Error{constructor(t,e,a){super(t),this.name="WalrusClientError",this.code=e,a&&(this.cause=a)}}class u{constructor(t){this.client=l}getClient(){return this.client}async storeTodo(t,e,a){let r=await this.client.uploadJson(t,{epochs:a.epochs});return{blobId:r.blobId,metadata:{size:r.encodedSize||r.size}}}async retrieveTodo(t){return this.client.downloadJson(t)}async estimateTodoStorageCost(t,e){let a=JSON.stringify(t).length,r=BigInt(a),o=BigInt(a)*BigInt(e);return{totalCost:r+o,sizeBytes:a,storageCost:o,writeCost:r}}}}};