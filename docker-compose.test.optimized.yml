# Optimized Docker Compose for WalTodo CLI testing
# Features: build caching, timeout management, resource limits, health checks

version: '3.8'

services:
  # ==============================================================================
  # Main WalTodo CLI testing service with optimizations
  # ==============================================================================
  waltodo-test-optimized:
    build:
      context: .
      dockerfile: Dockerfile.test.optimized
      target: test-runner
      # Build arguments for optimization
      args:
        NODE_ENV: test
        BUILDKIT_INLINE_CACHE: 1
      # Build cache configuration
      cache_from:
        - waltodo-test-optimized:latest
    container_name: waltodo-cli-test-optimized
    
    # Resource limits for consistent performance
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    
    # Optimized environment variables
    environment:
      - NODE_ENV=test
      - WALTODO_TEST_MODE=true
      - WALTODO_SUPPRESS_WARNINGS=true
      - NODE_OPTIONS=--max-old-space-size=2048
      - PNPM_HOME=/home/testuser/.local/share/pnpm
      - PATH=/home/testuser/.local/share/pnpm:$PATH
      # Timeout configurations
      - DOCKER_BUILD_TIMEOUT=600
      - PNPM_TIMEOUT=300000
      - TEST_TIMEOUT=1800
      # Cache optimization
      - PNPM_STORE_DIR=/home/testuser/.pnpm-store
      - NODE_MODULES_CACHE=true
    
    # Optimized volume mounts
    volumes:
      # Test scripts (read-only for security)
      - ./docker-test-scripts:/home/testuser/test-scripts:ro
      # Persistent directories with tmpfs for performance
      - test-results-optimized:/home/testuser/waltodo/test-results
      - logs-optimized:/home/testuser/waltodo/logs
      - ./test-data-docker:/home/testuser/test-data
      # Cache volumes for faster rebuilds
      - pnpm-cache:/home/testuser/.pnpm-store
      - node-modules-cache:/home/testuser/waltodo/node_modules
    
    # Networking configuration
    networks:
      - waltodo-test-network-optimized
    
    # Health check for service readiness
    healthcheck:
      test: ["CMD", "node", "--version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Restart policy for stability
    restart: unless-stopped
    
    # Command with timeout management
    command: >
      bash -c "
        echo 'Starting optimized WalTodo CLI tests...';
        timeout 1800 bash /home/testuser/test-scripts/run-comprehensive-tests.sh || 
        echo 'Tests completed or timed out after 30 minutes'
      "
    
    # Dependencies - wait for mock services
    depends_on:
      sui-mock-optimized:
        condition: service_healthy
      walrus-mock-optimized:
        condition: service_healthy

  # ==============================================================================
  # Optimized Mock Sui network service
  # ==============================================================================
  sui-mock-optimized:
    image: nginx:1.25-alpine
    container_name: sui-mock-server-optimized
    
    # Resource limits for mock service
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    
    # Port configuration
    ports:
      - "9000:80"
    
    # Mock response configuration
    volumes:
      - ./docker-test-scripts/mock-responses:/usr/share/nginx/html:ro
      - ./docker-test-scripts/nginx-optimized.conf:/etc/nginx/conf.d/default.conf:ro
    
    # Network configuration
    networks:
      - waltodo-test-network-optimized
    
    # Health check for mock service
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    
    # Restart policy
    restart: unless-stopped

  # ==============================================================================
  # Optimized Mock Walrus service
  # ==============================================================================
  walrus-mock-optimized:
    image: nginx:1.25-alpine
    container_name: walrus-mock-server-optimized
    
    # Resource limits for mock service
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    
    # Port configuration
    ports:
      - "9001:80"
    
    # Mock response configuration
    volumes:
      - ./docker-test-scripts/mock-responses:/usr/share/nginx/html:ro
      - ./docker-test-scripts/nginx-optimized.conf:/etc/nginx/conf.d/default.conf:ro
    
    # Network configuration
    networks:
      - waltodo-test-network-optimized
    
    # Health check for mock service
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    
    # Restart policy
    restart: unless-stopped

  # ==============================================================================
  # Optimized PostgreSQL for API testing
  # ==============================================================================
  postgres-test-optimized:
    image: postgres:15-alpine
    container_name: postgres-test-db-optimized
    
    # Resource limits for database
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 128M
    
    # Database configuration
    environment:
      POSTGRES_DB: waltodo_test
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
      # Performance optimizations
      POSTGRES_SHARED_BUFFERS: 128MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 256MB
    
    # Port configuration
    ports:
      - "5433:5432"
    
    # Volume configuration
    volumes:
      - postgres_test_data_optimized:/var/lib/postgresql/data
      - ./docker-test-scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    
    # Network configuration
    networks:
      - waltodo-test-network-optimized
    
    # Health check for database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d waltodo_test"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    
    # Restart policy
    restart: unless-stopped

  # ==============================================================================
  # Optimized Redis for caching tests
  # ==============================================================================
  redis-test-optimized:
    image: redis:7-alpine
    container_name: redis-test-cache-optimized
    
    # Resource limits for cache
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    
    # Redis configuration
    command: >
      redis-server 
      --maxmemory 128mb 
      --maxmemory-policy allkeys-lru
      --save ""
      --appendonly no
    
    # Port configuration
    ports:
      - "6380:6379"
    
    # Network configuration
    networks:
      - waltodo-test-network-optimized
    
    # Health check for cache
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    
    # Restart policy
    restart: unless-stopped

# ==============================================================================
# Optimized volumes configuration
# ==============================================================================
volumes:
  # Persistent data volumes
  postgres_test_data_optimized:
    driver: local
  
  # Performance volumes with tmpfs
  test-results-optimized:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=1g,uid=1000,gid=1000
  
  logs-optimized:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
      o: size=512m,uid=1000,gid=1000
  
  # Cache volumes for build optimization
  pnpm-cache:
    driver: local
  
  node-modules-cache:
    driver: local

# ==============================================================================
# Optimized network configuration
# ==============================================================================
networks:
  waltodo-test-network-optimized:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: waltodo-test-br
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1