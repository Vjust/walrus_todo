name: 🌊 Walrus Sites CI/CD Pipeline

on:
  push:
    branches: 
      - main
      - develop
      - cli-frontend
    paths:
      - 'waltodo-frontend/walrus-site-waltodo/**'
      - '.github/workflows/walrus-deployment.yml'
  pull_request:
    branches: 
      - main
    paths:
      - 'waltodo-frontend/walrus-site-waltodo/**'
  workflow_dispatch:
    inputs:
      deployment_environment:
        description: 'Deployment Environment'
        required: true
        default: 'testnet'
        type: choice
        options:
          - testnet
          - mainnet
      force_deploy:
        description: 'Force deployment (skip validation)'
        required: false
        default: false
        type: boolean
      enable_rollback:
        description: 'Enable automatic rollback on failure'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'
  DEPLOYMENT_TIMEOUT: '1800' # 30 minutes
  ARTIFACT_RETENTION_DAYS: 90

jobs:
  # ===== VALIDATION & PREPARATION =====
  validate-and-prepare:
    name: 📋 Validation & Preparation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      deployment-environment: ${{ steps.env-setup.outputs.deployment-environment }}
      version: ${{ steps.version.outputs.version }}
      git-commit: ${{ steps.version.outputs.git-commit }}
      should-deploy: ${{ steps.validation.outputs.should-deploy }}
      deployment-key: ${{ steps.env-setup.outputs.deployment-key }}
      
    steps:
      - name: 🏗️ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for version detection
          
      - name: 🔧 Setup Environment Variables
        id: env-setup
        run: |
          # Determine deployment environment
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            DEPLOY_ENV="${{ github.event.inputs.deployment_environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            DEPLOY_ENV="mainnet"
          else
            DEPLOY_ENV="testnet"
          fi
          echo "deployment-environment=$DEPLOY_ENV" >> $GITHUB_OUTPUT
          echo "deployment-key=walrus-$DEPLOY_ENV-$(date +%s)" >> $GITHUB_OUTPUT
          
          # Set environment-specific variables
          if [[ "$DEPLOY_ENV" == "mainnet" ]]; then
            echo "NEXT_PUBLIC_NETWORK=mainnet" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_RPC_URL=${{ secrets.MAINNET_RPC_URL }}" >> $GITHUB_ENV
            echo "WALRUS_EPOCHS=200" >> $GITHUB_ENV
          else
            echo "NEXT_PUBLIC_NETWORK=testnet" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_RPC_URL=${{ secrets.TESTNET_RPC_URL }}" >> $GITHUB_ENV
            echo "WALRUS_EPOCHS=100" >> $GITHUB_ENV
          fi
          
      - name: 📊 Extract Version Information
        id: version
        run: |
          cd waltodo-frontend/walrus-site-waltodo
          VERSION=$(node -p "require('./package.json').version")
          GIT_COMMIT=$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "git-commit=$GIT_COMMIT" >> $GITHUB_OUTPUT
          echo "📦 Version: $VERSION"
          echo "🔍 Commit: $GIT_COMMIT"
          
      - name: ✅ Validate Project Structure
        id: validation
        run: |
          cd waltodo-frontend/walrus-site-waltodo
          
          # Check required files
          required_files=(
            "package.json"
            "next.config.js"
            "walrus-site.config.json"
            "scripts/deploy-walrus.sh"
            "scripts/build-for-walrus.sh"
          )
          
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "❌ Missing required file: $file"
              exit 1
            fi
          done
          
          # Validate configuration
          if [[ "${{ github.event.inputs.force_deploy }}" != "true" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "⚠️ Force deploy enabled - skipping some validations"
          fi
          
          echo "✅ Project structure validation passed"

  # ===== DEPENDENCY MANAGEMENT =====
  install-dependencies:
    name: 📦 Install Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: validate-and-prepare
    steps:
      - name: 🏗️ Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 🏗️ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: 📋 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: 🗄️ Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: 📦 Install Dependencies
        run: |
          cd waltodo-frontend/walrus-site-waltodo
          pnpm install --frozen-lockfile
          
      - name: 💾 Cache node_modules
        uses: actions/cache@v3
        with:
          path: waltodo-frontend/walrus-site-waltodo/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('waltodo-frontend/walrus-site-waltodo/pnpm-lock.json') }}

  # ===== QUALITY ASSURANCE =====
  quality-checks:
    name: 🔍 Quality Assurance
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [validate-and-prepare, install-dependencies]
    steps:
      - name: 🏗️ Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 🏗️ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: 🗄️ Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: waltodo-frontend/walrus-site-waltodo/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('waltodo-frontend/walrus-site-waltodo/pnpm-lock.json') }}
          
      - name: 🔍 ESLint Check
        run: |
          cd waltodo-frontend/walrus-site-waltodo
          pnpm lint
          
      - name: 🔍 TypeScript Check
        run: |
          cd waltodo-frontend/walrus-site-waltodo
          pnpm typecheck
          
      - name: 🔍 Configuration Validation
        run: |
          cd waltodo-frontend/walrus-site-waltodo
          pnpm validate:config
          
      - name: 🔍 Network Configuration Check
        run: |
          cd waltodo-frontend/walrus-site-waltodo
          pnpm validate:network:${{ needs.validate-and-prepare.outputs.deployment-environment }}

  # ===== BUILD PROCESS =====
  build-application:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [validate-and-prepare, install-dependencies, quality-checks]
    env:
      NEXT_PUBLIC_NETWORK: ${{ needs.validate-and-prepare.outputs.deployment-environment }}
    outputs:
      build-size: ${{ steps.build-info.outputs.build-size }}
      file-count: ${{ steps.build-info.outputs.file-count }}
      
    steps:
      - name: 🏗️ Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 🏗️ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: 🗄️ Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: waltodo-frontend/walrus-site-waltodo/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('waltodo-frontend/walrus-site-waltodo/pnpm-lock.json') }}
          
      - name: 🔧 Setup Environment
        run: |
          cd waltodo-frontend/walrus-site-waltodo
          
          # Create production environment file
          cat > .env.production << EOF
          NEXT_PUBLIC_NETWORK=${{ needs.validate-and-prepare.outputs.deployment-environment }}
          NEXT_PUBLIC_RPC_URL=${{ env.NEXT_PUBLIC_RPC_URL }}
          NEXT_PUBLIC_APP_VERSION=${{ needs.validate-and-prepare.outputs.version }}
          NEXT_PUBLIC_BUILD_COMMIT=${{ needs.validate-and-prepare.outputs.git-commit }}
          NEXT_PUBLIC_BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          EOF
          
      - name: 🏗️ Build Static Site
        run: |
          cd waltodo-frontend/walrus-site-waltodo
          
          # Run optimized build
          pnpm build:walrus
          
          # Verify build output
          if [[ ! -d "./out" ]]; then
            echo "❌ Build failed - no output directory"
            exit 1
          fi
          
      - name: 📊 Extract Build Information
        id: build-info
        run: |
          cd waltodo-frontend/walrus-site-waltodo
          BUILD_SIZE=$(du -sh ./out | cut -f1)
          FILE_COUNT=$(find ./out -type f | wc -l)
          echo "build-size=$BUILD_SIZE" >> $GITHUB_OUTPUT
          echo "file-count=$FILE_COUNT" >> $GITHUB_OUTPUT
          echo "📦 Build size: $BUILD_SIZE"
          echo "📄 File count: $FILE_COUNT"
          
      - name: 🗄️ Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: walrus-site-build-${{ needs.validate-and-prepare.outputs.deployment-key }}
          path: waltodo-frontend/walrus-site-waltodo/out/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  # ===== TESTING =====
  test-deployment:
    name: 🧪 Test Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [validate-and-prepare, build-application]
    if: github.event.inputs.force_deploy != 'true'
    steps:
      - name: 🏗️ Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 🏗️ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: 🗄️ Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: waltodo-frontend/walrus-site-waltodo/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('waltodo-frontend/walrus-site-waltodo/pnpm-lock.json') }}
          
      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: walrus-site-build-${{ needs.validate-and-prepare.outputs.deployment-key }}
          path: waltodo-frontend/walrus-site-waltodo/out/
          
      - name: 🎭 Install Playwright
        run: |
          cd waltodo-frontend/walrus-site-waltodo
          pnpm test:e2e:install
          
      - name: 🧪 Run E2E Tests
        run: |
          cd waltodo-frontend/walrus-site-waltodo
          
          # Start static server and run tests
          pnpm test:e2e:ci
          
      - name: 📋 Upload Test Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-report-${{ needs.validate-and-prepare.outputs.deployment-key }}
          path: waltodo-frontend/walrus-site-waltodo/playwright-report/
          retention-days: 30

  # ===== DEPLOYMENT =====
  deploy-to-walrus:
    name: 🚀 Deploy to Walrus Sites
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [validate-and-prepare, build-application, test-deployment]
    if: |
      always() && 
      needs.validate-and-prepare.outputs.should-deploy == 'true' &&
      needs.build-application.result == 'success' &&
      (needs.test-deployment.result == 'success' || needs.test-deployment.result == 'skipped')
    environment: 
      name: ${{ needs.validate-and-prepare.outputs.deployment-environment }}
      url: ${{ steps.deploy.outputs.site-url }}
    outputs:
      site-id: ${{ steps.deploy.outputs.site-id }}
      site-url: ${{ steps.deploy.outputs.site-url }}
      deployment-package: ${{ steps.deploy.outputs.deployment-package }}
      
    steps:
      - name: 🏗️ Checkout Repository
        uses: actions/checkout@v4
        
      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: walrus-site-build-${{ needs.validate-and-prepare.outputs.deployment-key }}
          path: waltodo-frontend/walrus-site-waltodo/out/
          
      - name: 🔧 Setup Walrus CLI
        run: |
          # Install Walrus CLI if not present
          if ! command -v walrus &> /dev/null; then
            echo "Installing Walrus CLI..."
            curl -fLo walrus https://github.com/MystenLabs/walrus/releases/latest/download/walrus-ubuntu-x86_64
            chmod +x walrus
            sudo mv walrus /usr/local/bin/
          fi
          
          # Verify installation
          walrus --version
          
      - name: 🚀 Deploy to Walrus Sites
        id: deploy
        run: |
          cd waltodo-frontend/walrus-site-waltodo
          
          # Create deployment package
          VERSION="${{ needs.validate-and-prepare.outputs.version }}"
          COMMIT="${{ needs.validate-and-prepare.outputs.git-commit }}"
          PACKAGE_NAME="walrus-site-waltodo-${VERSION}-${COMMIT}.tar.gz"
          
          cd out
          tar -czf "../${PACKAGE_NAME}" .
          cd ..
          
          echo "deployment-package=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
          
          # Deploy to Walrus
          echo "Deploying to Walrus Sites..."
          DEPLOY_OUTPUT=$(walrus site publish ./out --epochs ${{ env.WALRUS_EPOCHS }} 2>&1)
          DEPLOY_EXIT_CODE=$?
          
          echo "Deployment output:"
          echo "$DEPLOY_OUTPUT"
          
          if [[ $DEPLOY_EXIT_CODE -eq 0 ]]; then
            # Extract site information
            SITE_ID=$(echo "$DEPLOY_OUTPUT" | grep -oP 'Site ID: \K[^[:space:]]+' || echo "unknown")
            SITE_URL=$(echo "$DEPLOY_OUTPUT" | grep -oP 'URL: \K[^[:space:]]+' || echo "unknown")
            
            echo "site-id=${SITE_ID}" >> $GITHUB_OUTPUT
            echo "site-url=${SITE_URL}" >> $GITHUB_OUTPUT
            
            # Save deployment log
            echo "$DEPLOY_OUTPUT" > deployment-log.txt
            
            echo "✅ Deployment successful!"
            echo "🆔 Site ID: $SITE_ID"
            echo "🌍 Site URL: $SITE_URL"
          else
            echo "❌ Deployment failed with exit code $DEPLOY_EXIT_CODE"
            echo "$DEPLOY_OUTPUT" > deployment-error.txt
            exit 1
          fi
          
      - name: 📋 Upload Deployment Artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: deployment-artifacts-${{ needs.validate-and-prepare.outputs.deployment-key }}
          path: |
            waltodo-frontend/walrus-site-waltodo/*.tar.gz
            waltodo-frontend/walrus-site-waltodo/deployment-*.txt
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  # ===== POST-DEPLOYMENT VALIDATION =====
  validate-deployment:
    name: ✅ Validate Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [validate-and-prepare, deploy-to-walrus]
    if: always() && needs.deploy-to-walrus.result == 'success'
    steps:
      - name: 🏗️ Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 🌐 Validate Site Accessibility
        run: |
          SITE_URL="${{ needs.deploy-to-walrus.outputs.site-url }}"
          
          if [[ "$SITE_URL" != "unknown" && "$SITE_URL" != "" ]]; then
            echo "Validating site: $SITE_URL"
            
            # Wait for site to be available
            for i in {1..10}; do
              if curl -f "$SITE_URL" >/dev/null 2>&1; then
                echo "✅ Site is accessible"
                break
              else
                echo "⏳ Waiting for site to be available (attempt $i/10)..."
                sleep 30
              fi
            done
            
            # Additional validation
            if curl -f "$SITE_URL" >/dev/null 2>&1; then
              echo "✅ Final validation: Site is accessible"
            else
              echo "❌ Site validation failed"
              exit 1
            fi
          else
            echo "⚠️ No site URL available for validation"
          fi

  # ===== ROLLBACK MECHANISM =====
  rollback-on-failure:
    name: 🔄 Rollback on Failure
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate-and-prepare, deploy-to-walrus, validate-deployment]
    if: |
      always() && 
      github.event.inputs.enable_rollback != 'false' &&
      (needs.deploy-to-walrus.result == 'failure' || needs.validate-deployment.result == 'failure')
    steps:
      - name: 🏗️ Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔄 Execute Rollback
        run: |
          echo "🔄 Initiating rollback process..."
          
          # Here you would implement rollback logic
          # For example, deploying the last known good version
          echo "⚠️ Rollback mechanism not yet implemented"
          echo "📧 Notification would be sent to deployment team"
          
          # In a real implementation, you might:
          # 1. Fetch the last successful deployment
          # 2. Re-deploy the previous version
          # 3. Update DNS or routing
          # 4. Send notifications

  # ===== NOTIFICATION =====
  notify-completion:
    name: 📢 Notify Completion
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [validate-and-prepare, deploy-to-walrus, validate-deployment]
    if: always()
    steps:
      - name: 📊 Determine Status
        id: status
        run: |
          DEPLOY_STATUS="${{ needs.deploy-to-walrus.result }}"
          VALIDATE_STATUS="${{ needs.validate-deployment.result }}"
          
          if [[ "$DEPLOY_STATUS" == "success" && "$VALIDATE_STATUS" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ Deployment completed successfully" >> $GITHUB_OUTPUT
          elif [[ "$DEPLOY_STATUS" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Deployment failed" >> $GITHUB_OUTPUT
          elif [[ "$VALIDATE_STATUS" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Deployment validation failed" >> $GITHUB_OUTPUT
          else
            echo "status=unknown" >> $GITHUB_OUTPUT
            echo "message=⚠️ Deployment status unknown" >> $GITHUB_OUTPUT
          fi
          
      - name: 📢 GitHub Summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # 🌊 Walrus Sites Deployment Summary
          
          ## 📊 Deployment Information
          - **Environment:** \`${{ needs.validate-and-prepare.outputs.deployment-environment }}\`
          - **Version:** \`${{ needs.validate-and-prepare.outputs.version }}\`
          - **Commit:** \`${{ needs.validate-and-prepare.outputs.git-commit }}\`
          - **Status:** ${{ steps.status.outputs.message }}
          
          ## 🏗️ Build Information
          - **Build Size:** ${{ needs.build-application.outputs.build-size }}
          - **File Count:** ${{ needs.build-application.outputs.file-count }}
          
          ## 🚀 Deployment Results
          EOF
          
          if [[ "${{ needs.deploy-to-walrus.outputs.site-url }}" != "" && "${{ needs.deploy-to-walrus.outputs.site-url }}" != "unknown" ]]; then
            cat >> $GITHUB_STEP_SUMMARY << EOF
          - **Site ID:** \`${{ needs.deploy-to-walrus.outputs.site-id }}\`
          - **Site URL:** [${{ needs.deploy-to-walrus.outputs.site-url }}](${{ needs.deploy-to-walrus.outputs.site-url }})
          - **Package:** \`${{ needs.deploy-to-walrus.outputs.deployment-package }}\`
          EOF
          else
            cat >> $GITHUB_STEP_SUMMARY << EOF
          - **Status:** Deployment information not available
          EOF
          fi
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          
          ## 📋 Next Steps
          1. Verify the deployed site is working correctly
          2. Update any external references to the new URL
          3. Monitor site performance and accessibility
          
          ---
          🤖 *Automated by GitHub Actions*
          EOF