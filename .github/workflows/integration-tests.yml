name: Integration Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: 8

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      # Redis service for caching if needed
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build projects
        run: |
          pnpm build:dev
          pnpm run global-install

      - name: Setup test environment
        run: |
          # Create necessary directories
          mkdir -p Todos
          mkdir -p logs
          mkdir -p .waltodo-cache
          
          # Set up environment variables
          cp .env.example .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "API_KEY=test-api-key" >> .env.test
          echo "JWT_SECRET=test-jwt-secret" >> .env.test
          echo "ENABLE_WEBSOCKET=true" >> .env.test
          echo "ENABLE_AUTH=false" >> .env.test
          echo "PORT=3001" >> .env.test

      - name: Run unit tests
        run: pnpm test:unit --coverage

      - name: Run integration tests
        run: |
          # Run integration tests with proper timeout
          pnpm test tests/integration/cli-frontend-integration.test.ts --testTimeout=30000
        env:
          NODE_ENV: test
          API_KEY: test-api-key
          JWT_SECRET: test-jwt-secret

      - name: Run E2E tests
        run: |
          # Run E2E tests
          pnpm test tests/e2e/todo-lifecycle.e2e.test.ts --testTimeout=30000
          pnpm test tests/e2e/websocket-realtime.e2e.test.ts --testTimeout=30000
        env:
          NODE_ENV: test

      - name: Upload coverage reports
        if: matrix.node-version == '18.x'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: integration
          name: integration-tests

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.node-version }}
          path: |
            coverage/
            jest-results.json
            logs/

  api-contract-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build API
        run: |
          cd apps/api
          pnpm build

      - name: Start API server
        run: |
          cd apps/api
          pnpm start &
          sleep 5
        env:
          NODE_ENV: test
          API_KEY: test-api-key
          PORT: 3001

      - name: Run API contract tests
        run: |
          # Install newman for Postman collection testing
          pnpm add -g newman
          
          # Run contract tests (if Postman collection exists)
          if [ -f "tests/api/postman-collection.json" ]; then
            newman run tests/api/postman-collection.json \
              --environment tests/api/test-environment.json \
              --reporters cli,json \
              --reporter-json-export newman-results.json
          fi

      - name: Validate OpenAPI spec
        run: |
          # Install swagger-cli
          pnpm add -g @apidevtools/swagger-cli
          
          # Validate OpenAPI spec if it exists
          if [ -f "apps/api/openapi.yaml" ]; then
            swagger-cli validate apps/api/openapi.yaml
          fi

  performance-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build projects
        run: pnpm build:dev

      - name: Run performance benchmarks
        run: |
          # Create performance test script if it doesn't exist
          if [ -f "tests/performance/benchmark.js" ]; then
            node tests/performance/benchmark.js
          else
            echo "No performance tests found"
          fi

      - name: Run load tests
        run: |
          # Install k6 for load testing
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
          
          # Run k6 load tests if they exist
          if [ -f "tests/load/api-load-test.js" ]; then
            k6 run tests/load/api-load-test.js
          fi

  security-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: |
          pnpm audit --audit-level=high
          
      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'walrus-todo'
          path: '.'
          format: 'HTML'

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: reports/

  notify-results:
    runs-on: ubuntu-latest
    needs: [integration-tests, api-contract-tests, performance-tests, security-tests]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.integration-tests.result }}" != "success" ] || \
             [ "${{ needs.api-contract-tests.result }}" != "success" ] || \
             [ "${{ needs.performance-tests.result }}" != "success" ] || \
             [ "${{ needs.security-tests.result }}" != "success" ]; then
            echo "Some tests failed!"
            exit 1
          else
            echo "All tests passed!"
          fi

      - name: Send notification
        if: failure() && github.event_name == 'push'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Integration tests failed on ${{ github.ref }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}