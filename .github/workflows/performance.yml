name: Performance Benchmarking

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  benchmark:
    runs-on: ubuntu-latest

    env:
      NODE_ENV: production
      SUI_NETWORK: testnet
      SUI_FULL_NODE_URL: 'https://fullnode.testnet.sui.io:443'
      WALRUS_AGGREGATOR: 'https://aggregator.walrus-testnet.walrus.space'
      WALRUS_PUBLISHER: 'https://publisher.walrus-testnet.walrus.space'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Setup pnpm PATH
        run: echo "$PNPM_HOME" >> $GITHUB_PATH

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Build project
        run: pnpm run build

      - name: Run performance benchmarks
        run: |
          # Create benchmarks directory
          mkdir -p benchmarks

          # Run performance tests
          echo "Running performance benchmarks..."

          # Storage performance (using real testnet)
          echo "=== Storage Performance ===" >> benchmarks/results.txt
          SUI_NETWORK=testnet time pnpm exec walrus store "Performance test todo" >> benchmarks/results.txt 2>&1

          # Command execution time
          echo -e "\n=== Command Execution Time ===" >> benchmarks/results.txt
          SUI_NETWORK=testnet time pnpm exec walrus list >> benchmarks/results.txt 2>&1

          # AI operations (if enabled)
          echo -e "\n=== AI Operations Performance ===" >> benchmarks/results.txt
          SUI_NETWORK=testnet time pnpm exec walrus ai summarize >> benchmarks/results.txt 2>&1

          # Bundle size analysis
          echo -e "\n=== Bundle Size Analysis ===" >> benchmarks/results.txt
          du -sh dist/ >> benchmarks/results.txt
          find dist -name "*.js" -exec du -h {} \; | sort -hr | head -10 >> benchmarks/results.txt

          # Memory usage
          echo -e "\n=== Memory Usage ===" >> benchmarks/results.txt
          SUI_NETWORK=testnet /usr/bin/time -v pnpm exec walrus list 2>&1 | grep -E "Maximum resident set size" >> benchmarks/results.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: performance-benchmarks
          path: benchmarks/

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const results = fs.readFileSync('benchmarks/results.txt', 'utf8');

            const comment = `## Performance Benchmark Results

            \`\`\`
            ${results}
            \`\`\`
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Compare with baseline
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # This would compare with previous benchmarks if they exist
          echo "Comparing with baseline performance..."
          # Add comparison logic here when baseline is established
